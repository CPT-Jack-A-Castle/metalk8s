kubeTargetVersionOverride: 1.15.3

commonLabels:
  # This needs to remain 'Tiller' for the render script to work properly
  #heritage: 'metalk8s'
  app.kubernetes.io/part-of: 'metalk8s'
  app.kubernetes.io/managed-by: 'metalk8s'

alertmanager:
  alertmanagerSpec:
    image:
      repository: '''{%- endraw -%}{{ build_image_name("alertmanager", False) }}{%- raw -%}'''

    nodeSelector:
      node-role.kubernetes.io/infra: ''

    podAntiAffinity: 'soft'

    tolerations:
      - key: 'node-role.kubernetes.io/bootstrap'
        operator: 'Exists'
        effect: 'NoSchedule'
      - key: 'node-role.kubernetes.io/infra'
        operator: 'Exists'
        effect: 'NoSchedule'

    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: metalk8s-prometheus
          accessModes: ['ReadWriteOnce']
          resources:
            requests:
              storage: 1Gi
          selector:
            matchLabels:
              app.kubernetes.io/name: prometheus-operator-alertmanager


prometheusOperator:
  tlsProxy:
    enabled: false

  admissionWebhooks:
    enabled: false

  nodeSelector:
    node-role.kubernetes.io/infra: ''

  tolerations:
    - key: 'node-role.kubernetes.io/bootstrap'
      operator: 'Exists'
      effect: 'NoSchedule'
    - key: 'node-role.kubernetes.io/infra'
      operator: 'Exists'
      effect: 'NoSchedule'

  image:
    repository: '{%- endraw -%}{{ build_image_name(\"prometheus-operator\", False) }}{%- raw -%}'

  configmapReloadImage:
    repository: '{%- endraw -%}{{ build_image_name("configmap-reload", False) }}{%- raw -%}'

  prometheusConfigReloaderImage:
    repository: '{%- endraw -%}{{ build_image_name("prometheus-config-reloader", False) }}{%- raw -%}'

  hyperkubeImage:
    repository: '''{%- endraw -%}{{ build_image_name("hyperkube", False) }}{%- raw -%}'''


prometheus:
  prometheusSpec:
    image:
      repository: '''{%- endraw -%}{{ build_image_name("prometheus", False) }}{%- raw -%}'''

    tolerations:
      - key: 'node-role.kubernetes.io/bootstrap'
        operator: 'Exists'
        effect: 'NoSchedule'
      - key: 'node-role.kubernetes.io/infra'
        operator: 'Exists'
        effect: 'NoSchedule'

    nodeSelector:
      node-role.kubernetes.io/infra: ''

    podAntiAffinity: 'soft'

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: metalk8s-prometheus
          accessModes: ['ReadWriteOnce']
          resources:
            requests:
              storage: 10Gi
          selector:
            matchLabels:
              app.kubernetes.io/name: prometheus-operator-prometheus

grafana:
  adminPassword: admin

  image:
    repository: '{%- endraw -%}{{ build_image_name(\"grafana\", False) }}{%- raw -%}'

  sidecar:
    image: '{%- endraw -%}{{ build_image_name(\"k8s-sidecar\", False) }}{%- raw -%}:0.1.20'

  nodeSelector:
    node-role.kubernetes.io/infra: ''

  tolerations:
    - key: 'node-role.kubernetes.io/bootstrap'
      operator: 'Exists'
      effect: 'NoSchedule'
    - key: 'node-role.kubernetes.io/infra'
      operator: 'Exists'
      effect: 'NoSchedule'

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx-control-plane
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    path: /grafana(/|$)(.*)
    hosts:
      - null

  grafana.ini:
    server:
      root_url: /grafana
    analytics:
      reporting_enabled: false
      check_for_updates: false

  testFramework:
    enabled: false


kube-state-metrics:
  image:
    repository: '{%- endraw -%}{{ build_image_name(\"kube-state-metrics\", False) }}{%- raw -%}'

  nodeSelector:
    node-role.kubernetes.io/infra: ''

  tolerations:
    - key: 'node-role.kubernetes.io/bootstrap'
      operator: 'Exists'
      effect: 'NoSchedule'
    - key: 'node-role.kubernetes.io/infra'
      operator: 'Exists'
      effect: 'NoSchedule'


prometheus-node-exporter:
  image:
    repository: '{%- endraw -%}{{ build_image_name(\"node-exporter\", False) }}{%- raw -%}'


kubeEtcd:
  service:
    port: 2381
    targetPort: 2381
