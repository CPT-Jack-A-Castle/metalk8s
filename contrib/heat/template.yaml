heat_template_version: pike

description: |
  Heat template for provisioning a MetalK8s cluster.

  This will first spawn (using Heat) a Bastion VM, which will then deploy and
  install the cluster (using Terraform, with your OneLogin credentials).

parameter_groups:
  - label: Deployment configuration
    description: |
      Define the credentials to use for deploying this cluster.
    parameters:
      - key_pair
      - scality_cloud_token
      - scality_cloud_region
      - public_network_id
  - label: MetalK8s configuration
    description: |
      Define the cluster configuration to deploy.
    parameters:
      - metalk8s_version
      - metalk8s_os
      - metalk8s_online
      - metalk8s_workers_count
      - metalk8s_workers_flavour
      
parameters:
  key_pair:
    type: string
    label: SSH Key Pair
    description: |
      Name of the key pair to use for deploying VMs (including Bastion)
    constraints:
      - custom_constraint: nova.keypair
    immutable: true
  scality_cloud_token:
    type: string
    label: Scality Cloud Token
    description: |
      API token to interact with scality.cloud OpenStack API (used by Bastion
      to spawn the rest of the cluster)
    immutable: true
  scality_cloud_region:
    type: string
    label: Region
    description: Region in which to spawn the cluster (including Bastion)
    constraints:
      - custom_constraint: keystone.region
    immutable: true
  public_network_id:
    type: string
    label: Public Network
    description: |
      Public network to use for the deployment and access to VMs (WIP - this is
      used to find out which tenant to spawn in, need to find a better way to
      do this)
    constraints:
      - custom_constraint: neutron.network
    immutable: true
  metalk8s_online:
    type: boolean
    label: Online Deployment
    description: |
      Whether to install an online cluster (only relying on the public network
      in your tenant), or not (thus spawning private networks and isolating
      cluster nodes from Internet)
    default: false
    immutable: true
  metalk8s_os:
    type: string
    label: Operating System
    description: Which OS to use for cluster nodes (CentOS7 or RHEL7)
    default: centos7
    immutable: true
    constraints:
      - allowed_values: ["centos7", "rhel7"]
  metalk8s_version:
    type: string
    label: MetalK8s Version
    description: Which version of MetalK8s to install
    default: "2.4.2"
    constraints:
      - allowed_values:
          - "2.4.2"
    immutable: true
  metalk8s_workers_count:
    type: number
    label: Workers Count
    description: Number of MetalK8s worker nodes to deploy
    default: 3
    constraints:
      - range: { min: 0, max: 99 }
    immutable: true
  metalk8s_workers_flavour:
    type: string
    label: Workers Flavour
    description: Instance flavour to use for MetalK8s worker nodes
    default: large
    constraints:
      - allowed_values: [small, medium, large, xlarge]
    immutable: true

conditions:
  offline: { not: { get_param: metalk8s_online } }
  os_centos7: { equals: [ { get_param: metalk8s_os }, centos7 ] }
  os_rhel7: { equals: [ { get_param: metalk8s_os }, rhel7 ] }

resources:
  # Common resources
  random_name:
    type: OS::Heat::RandomString
    properties:
      length: 5
  # Networks
  public_network:
    type: OS::Neutron::Net
    external_id: { get_param: public_network_id }
  control_plane_network:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
      name:
        str_replace:
          template: metalk8s-$random-control-plane
          params: { $random: { get_attr: [random_name, value] } }
  control_plane_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: control_plane_network }
      cidr: "192.168.1.0/24"
      ip_version: 4
      name:
        str_replace:
          template: metalk8s-$random-control-plane-subnet
          params: { $random: { get_attr: [random_name, value] } }
  workload_plane_network:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
      name:
        str_replace:
          template: metalk8s-$random-workload-plane
          params: { $random: { get_attr: [random_name, value] } }
  workload_plane_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: workload_plane_network }
      cidr: "192.168.2.0/24"
      ip_version: 4
      name:
        str_replace:
          template: metalk8s-$random-workload-plane-subnet
          params: { $random: { get_attr: [random_name, value] } }
  # Security groups
  ingress_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: metalk8s-$random-ingress-secgroup
          params: { $random: { get_attr: [random_name, value] } }
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          remote_ip_prefix: "0.0.0.0/0"
        - direction: ingress
          ethertype: IPv4
          protocol: icmp
          remote_ip_prefix: "0.0.0.0/0"
        - direction: ingress
          ethertype: IPv4
  open_egress_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: metalk8s-$random-open-egress-secgroup
          params: { $random: { get_attr: [random_name, value] } }
  restricted_egress_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      # NOTE: rules are going to be set by Terraform
      name:
        str_replace:
          template: metalk8s-$random-restricted-egress-secgroup
          params: { $random: { get_attr: [random_name, value] } }
  # Bootstrap VM and ports
  bootstrap:
    type: node.template
    properties:
      name:
        str_replace:
          template: metalk8s-$random-bootstrap
          params: { $random: { get_attr: [random_name, value] } }
      key_pair: { get_param: key_pair }
      flavor: m1.large
      image:
        if:
          - os_centos7
          - CentOS-7-x86_64-GenericCloud-1809.qcow2
          - if:
              - os_rhel7
              - rhel-server-updated-7.6-x86_64-kvm.qcow2
              - CentOS-7-x86_64-GenericCloud-latest  # Default value
      public_network_id: { get_resource: public_network }
      control_plane_network_id: { get_resource: control_plane_network }
      control_plane_subnet_id: { get_resource: control_plane_subnet }
      workload_plane_network_id: { get_resource: workload_plane_network }
      workload_plane_subnet_id: { get_resource: workload_plane_subnet }
      ingress_secgroup_id: { get_resource: ingress_secgroup }
      egress_secgroup_id:
        if:
          - offline
          - get_resource: restricted_egress_secgroup
          - get_resource: open_egress_secgroup
  # Master VMs and ports
  masters:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: node.template
        properties:
          name:
            str_replace:
              template: metalk8s-$random-master-%index%
              params: { $random: { get_attr: [random_name, value] } }
          key_pair: { get_param: key_pair }
          flavor:
            # FIXME: this should have constant sizing, but we need the same
            # as workers for later import in Terraform
            str_replace:
              template: m1.$flavor
              params: { $flavor: { get_param: metalk8s_workers_flavour } }
          image:
            if:
              - os_centos7
              - CentOS-7-x86_64-GenericCloud-1809.qcow2
              - if:
                  - os_rhel7
                  - rhel-server-updated-7.6-x86_64-kvm.qcow2
                  - CentOS-7-x86_64-GenericCloud-latest  # Default value
          public_network_id: { get_resource: public_network }
          control_plane_network_id: { get_resource: control_plane_network }
          control_plane_subnet_id: { get_resource: control_plane_subnet }
          workload_plane_network_id: { get_resource: workload_plane_network }
          workload_plane_subnet_id: { get_resource: workload_plane_subnet }
          ingress_secgroup_id: { get_resource: ingress_secgroup }
          egress_secgroup_id:
            if:
              - offline
              - get_resource: restricted_egress_secgroup
              - get_resource: open_egress_secgroup
  # Worker VMs and ports
  workers:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: metalk8s_workers_count }
      resource_def:
        type: node.template
        properties:
          name:
            str_replace:
              template: metalk8s-$random-worker-%index%
              params: { $random: { get_attr: [random_name, value] } }
          key_pair: { get_param: key_pair }
          flavor:
            str_replace:
              template: m1.$flavor
              params: { $flavor: { get_param: metalk8s_workers_flavour } }
          image:
            if:
              - os_centos7
              - CentOS-7-x86_64-GenericCloud-1809.qcow2
              - if:
                  - os_rhel7
                  - rhel-server-updated-7.6-x86_64-kvm.qcow2
                  - CentOS-7-x86_64-GenericCloud-latest  # Default value
          public_network_id: { get_resource: public_network }
          control_plane_network_id: { get_resource: control_plane_network }
          control_plane_subnet_id: { get_resource: control_plane_subnet }
          workload_plane_network_id: { get_resource: workload_plane_network }
          workload_plane_subnet_id: { get_resource: workload_plane_subnet }
          ingress_secgroup_id: { get_resource: ingress_secgroup }
          egress_secgroup_id:
            if:
              - offline
              - get_resource: restricted_egress_secgroup
              - get_resource: open_egress_secgroup
  # Bastion ports
  bastion_public_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: public_network }
      security_groups:
        - get_resource: ingress_secgroup
        - get_resource: open_egress_secgroup
  bastion_control_plane_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: control_plane_network }
      fixed_ips:
        - subnet_id: { get_resource: control_plane_subnet }
  bastion_workload_plane_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: workload_plane_network }
      fixed_ips:
        - subnet_id: { get_resource: workload_plane_subnet }
  # Bastion cloud-init
  bastion_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        packages:
          - git
          - unzip
        write_files:
          - path: /run/terraform/openstack.env
            owner: root:root
            content:
              str_replace:
                template: { get_file: templates/openstack.env.tpl }
                params:
                  $tenant_id: { get_attr: [public_network, tenant_id] }
                  $region_name: { get_param: scality_cloud_region }
                  $api_token: { get_param: scality_cloud_token }
          - path: /run/terraform/deployment.tfvars
            owner: root:root
            content:
              str_replace:
                template: { get_file: templates/deployment.tfvars.tpl }
                params:
                  $random: { get_attr: [random_name, value] }
                  $image_name: { get_param: metalk8s_os }
                  $online: { if: [offline, 'false', 'true'] }
                  $workers_count: { get_param: metalk8s_workers_count }
                  $flavour_name: { get_param: metalk8s_workers_flavour }
                  $cp_subnet_name: { get_attr: [control_plane_subnet, name] }
                  $wp_subnet_name: { get_attr: [workload_plane_subnet, name] }
                  $metalk8s_version: { get_param: metalk8s_version }
          - path: /run/terraform/tf-imports.sh
            owner: root:root
            permissions: '0755'
            content:
              str_replace:
                template: { get_file: templates/tf-imports.sh.tpl }
                params:
                  $keypair:
                    get_param: key_pair
                  $open_egress:
                    get_resource: open_egress_secgroup
                  $restricted_egress:
                    get_resource: restricted_egress_secgroup
                  $ingress:
                    get_resource: ingress_secgroup
                  $bastion_cp_port:
                    get_resource: bastion_control_plane_port
                  $bastion_wp_port:
                    get_resource: bastion_workload_plane_port
                  $bootstrap_id:
                    get_resource: bootstrap
                  $bootstrap_cp_port:
                    get_attr: [bootstrap, control_plane_port]
                  $bootstrap_wp_port:
                    get_attr: [bootstrap, workload_plane_port]
                  $master_ids:
                    list_join:
                      - ' '
                      - get_attr: [masters, refs]
                  $master_cp_ports:
                    list_join:
                      - ' '
                      - get_attr: [masters, control_plane_port]
                  $master_wp_ports:
                    list_join:
                      - ' '
                      - get_attr: [masters, workload_plane_port]
                  $worker_ids:
                    list_join:
                      - ' '
                      - get_attr: [workers, refs]
                  $worker_cp_ports:
                    list_join:
                      - ' '
                      - get_attr: [workers, control_plane_port]
                  $worker_wp_ports:
                    list_join:
                      - ' '
                      - get_attr: [workers, workload_plane_port]
  bastion_boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: scripts/bastion-init.sh }
  setup_iface_script:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: scripts/setup-ifaces.sh }
  bastion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: bastion_boot_script }
        - config: { get_resource: bastion_cloud_config }
  # Bastion VM
  bastion:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: metalk8s-$random-bastion
          params: { $random: { get_attr: [random_name, value] } }
      key_name: { get_param: key_pair }
      flavor: m1.small
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      networks:
        - port: { get_resource: bastion_public_port }
        - port: { get_resource: bastion_control_plane_port }
        - port: { get_resource: bastion_workload_plane_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: bastion_init }

# outputs:
#   bastion_ip:
#     get_attr:
#       - bastion
#       - networks
#       - { get_resource: tenant_network }
#       - 0
#   bootstrap_control_plane_ip:
#     get_attr: [bastion_boot_script, bootstrap_cp_ip]
#   node_control_plane_ips:
#     get_attr: [bastion_boot_script, node_cp_ips]
