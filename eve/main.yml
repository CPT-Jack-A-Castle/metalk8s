version: '0.2'
branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*, documentation/*, release/*:
    stage: pre-merge
stages:
  pre-merge:
    worker:
      type: local
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED'
        command: mkdir -p build_status/build_status && echo 'FAILED' > build_status/build_status/final_status
        haltOnFailure: true
    - SetPropertyFromCommand:
        name: Set previous version to upgrade from and downgrade to
        property: product_version_prev
        command: major=$(echo "%(prop:product_version)s" | cut -d'.' -f1) && minor=$(echo
          "%(prop:product_version)s" | cut -d'.' -f2) && echo "$major.$(( $minor -
          1 ))"
    - TriggerStages:
        name: Trigger build, docs, lint and unit tests stages
        stage_names:
        - build
        - buildprev
        - docs
        - lint
        - unit-tests
        haltOnFailure: true
    - SetPropertyFromCommand:
        name: Set version as property from built artifacts
        property: metalk8s_version
        command: bash -c '. <(curl -s "%(prop:artifacts_private_url)s/product.txt")
          && echo $VERSION'
    - SetPropertyFromCommand:
        name: Set version as property from built artifacts
        property: metalk8s_version_prev
        command: bash -c '. <(curl -s "%(prop:artifacts_private_url)s/pre/product.txt")
          && echo $VERSION'
    - TriggerStages:
        name: Trigger single-node and multiple-nodes stages
        stage_names:
        - single-node-upgrade-centos
        - single-node-downgrade-centos
        - single-node-install-rhel
        - multiple-nodes
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL'
        command: mkdir -p build_status/build_status && echo 'SUCCESSFUL' > build_status/build_status/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: &id001 build_status
  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for build
        command: mkdir -p build_status/build_status/build && echo 'FAILED' > build_status/build_status/build/final_status
        haltOnFailure: true
    - ShellCommand:
        name: Wait for Docker daemon to be ready
        command: "bash -c '\nfor i in {1..150}; do\n  docker info &> /dev/null &&\
          \ exit\n  sleep 2\ndone\necho \"Could not reach Docker daemon from Buildbot\
          \ worker\" >&2\nexit 1'"
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build everything
        command: ./doit.sh -n 4
        env:
          PYTHON_SYS: python3.6
        usePTY: true
        haltOnFailure: true
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in "build.log _build/metalk8s.iso
          _build/SHA256SUM _build/root/product.txt"; then cp -r "$artifact" artifacts;
          done
    - Upload:
        name: Upload artifacts
        source: &id002 artifacts
        urls:
        - metalk8s.iso
        - SHA256SUM
        - product.txt
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for build
        command: mkdir -p build_status/build_status/build && echo 'SUCCESSFUL' > build_status/build_status/build/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  buildprev:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for buildprev
        command: mkdir -p build_status/build_status/buildprev && echo 'FAILED' > build_status/build_status/buildprev/final_status
        haltOnFailure: true
    - ShellCommand:
        name: Wait for Docker daemon to be ready
        command: "bash -c '\nfor i in {1..150}; do\n  docker info &> /dev/null &&\
          \ exit\n  sleep 2\ndone\necho \"Could not reach Docker daemon from Buildbot\
          \ worker\" >&2\nexit 1'"
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build everything
        command: ./doit.sh -n 4
        env:
          PYTHON_SYS: python3.6
        workdir: build/metalk8s-prev
        usePTY: true
        haltOnFailure: true
    - ShellCommand:
        name: Copy artifactsfor 'pre'
        command: mkdir -p artifacts/pre; for artifact in "metalk8s-prev/build.log
          metalk8s-prev/_build/metalk8s.iso metalk8s-prev/_build/SHA256SUM metalk8s-prev/_build/root/product.txt";
          then cp -r "$artifact" artifacts/pre; done
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - pre/metalk8s.iso
        - pre/SHA256SUM
        - pre/product.txt
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for buildprev
        command: mkdir -p build_status/build_status/buildprev && echo 'SUCCESSFUL'
          > build_status/build_status/buildprev/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  docs:
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: .
          dockerfile: docs/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for docs
        command: mkdir -p build_status/build_status/docs && echo 'FAILED' > build_status/build_status/docs/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build documentation
        command: tox --workdir /tmp/tox -e docs -- html latexpdf
        env:
          READTHEDOCS: 'True'
        haltOnFailure: true
    - ShellCommand:
        name: Copy artifactsfor 'docs'
        command: mkdir -p artifacts/docs; for artifact in "docs/_build/* CHANGELOG.md";
          then cp -r "$artifact" artifacts/docs; done
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - docs/html/index.html
        - docs/latex/MetalK8s.pdf
        - docs/CHANGELOG.md
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for docs
        command: mkdir -p build_status/build_status/docs && echo 'SUCCESSFUL' > build_status/build_status/docs/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter:
          context: storage-operator
          dockerfile: eve/workers/pod-linter/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for lint
        command: mkdir -p build_status/build_status/lint && echo 'FAILED' > build_status/build_status/lint/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Run all linting targets
        command: ./doit.sh lint
        usePTY: true
        haltOnFailure: false
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for lint
        command: mkdir -p build_status/build_status/lint && echo 'SUCCESSFUL' > build_status/build_status/lint/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  unit-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod-unit-tests/pod.yaml
      images:
        docker-unit-tests:
          context: storage-operator
          dockerfile: eve/workers/pod-unit-tests/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for unit-tests
        command: mkdir -p build_status/build_status/unit-tests && echo 'FAILED' >
          build_status/build_status/unit-tests/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Run all UI unit tests
        command: npm ci --no-cache --no-save -q --no-update-notifier & npm run test:nowatch
          --no-update-notifier
        workdir: build/ui
        haltOnFailure: false
    - ShellCommand:
        name: Run all storage-operator unit tests
        command: go test -cover -v ./...
        workdir: build/storage-operator
        haltOnFailure: false
    - ShellCommand:
        name: Copy artifactsfor 'ui'
        command: mkdir -p artifacts/ui; for artifact in "ui/junit"; then cp -r "$artifact"
          artifacts/ui; done
    - Upload:
        name: Upload artifacts
        source: *id002
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for unit-tests
        command: mkdir -p build_status/build_status/unit-tests && echo 'SUCCESSFUL'
          > build_status/build_status/unit-tests/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  single-node-upgrade-centos:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node-upgrade-centos
        command: mkdir -p build_status/build_status/single-node-upgrade-centos &&
          echo 'FAILED' > build_status/build_status/single-node-upgrade-centos/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "bash -c '\nmkdir -p ~/.ssh\necho \"%(secret:ssh_pub_keys)s\" >>\
          \ ~/.ssh/authorized_keys\nIP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet\
          \ ([0-9.]+).*$/\x01/p' )\ncat << END\nConnect to this worker using:\n  \
          \  ssh eve@$IP\nEND'"
    - ShellCommand:
        name: Retrieve ISO image checksum
        command: curl -s -XGET -o "SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM"
    - ShellCommand:
        name: Retrieve ISO image
        command: "bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out of\
          \ 20\"\n  curl -s -XGET -o \"metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: sha256sum -c SHA256SUM
        workdir: .
    - ShellCommand:
        name: Retrieve ISO image checksum (pre)
        command: curl -s -XGET -o "/tmp/SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM"
    - ShellCommand:
        name: Retrieve ISO image (pre)
        command: "bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out of\
          \ 20\"\n  curl -s -XGET -o \"/tmp/metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum (pre)
        command: sha256sum -c SHA256SUM
        workdir: /tmp
    - ShellCommand:
        name: Create ISO mountpoint
        command: sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s"
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: sudo mount -o loop "/tmp/metalk8s.iso" "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s"
        haltOnFailure: true
    - ShellCommand:
        name: Create bootstrap configuration file
        command: "sudo bash -c '\nmkdir -p /etc/metalk8s\ncat > /etc/metalk8s/bootstrap.yaml\
          \ << END\napiVersion: metalk8s.scality.com/v1alpha2\nkind: BootstrapConfiguration\n\
          networks:\n  controlPlane: 10.100.0.0/16\n  workloadPlane: 10.100.0.0/16\n\
          ca:\n  minion: $(hostname)\napiServer:\n  host: $(ip route get 10.100.0.0\
          \ | awk '/10.100.0.0/{ print $6 }')\narchives:\n  - \"$(relpath '/tmp/metalk8s.iso')\"\
          \nEND'"
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s/bootstrap.sh"
          --verbose
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests locally for previous version
        command: git checkout "$BRANCH" --quiet && tox -e tests-local  -- -m "post
          and ci and not multinode and not slow"
        env:
          BRANCH: development/%(prop:product_version_prev)s
          ISO_MOUNTPOINT: /srv/scality/metalk8s-%(prop:metalk8s_version_prev)s
        haltOnFailure: true
    - ShellCommand:
        name: Copy artifacts for 'ui/cypress'
        command: mkdir -p artifacts/ui/cypress; for artifact in "ui/cypress/screenshots
          ui/cypress/videos"; then cp -r "$artifact" artifacts/ui/cypress; done
    - ShellCommand:
        name: Copy artifacts for 'ui'
        command: mkdir -p artifacts/ui; for artifact in "ui/junit"; then cp -r "$artifact"
          artifacts/ui; done
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in "ui/cypress ui"; then cp -r "$artifact"
          artifacts; done
    - ShellCommand:
        name: Add ISO to cluster
        command: sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s/iso-manager.sh"
          --archive "$(readlink -f "metalk8s.iso")"
        haltOnFailure: true
    - ShellCommand:
        name: Run upgrade from previous version
        command: sudo bash /srv/scality/metalk8s-%(prop:metalk8s_version_prev)s/upgrade.sh
          --destination-version %(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Provision Prometheus and AlertManager storage
        command: 'sudo env PRODUCT_TXT=/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT=/srv/scality/metalk8s-%(prop:metalk8s_version)s bash eve/create-volumes.sh '
        env:
          PRODUCT_TXT: /srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT: /srv/scality/metalk8s-%(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests locally
        command: git checkout "$BRANCH" --quiet && tox -e tests-local  -- -m "post
          and ci and not multinode and not slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: &id003 /srv/scality/metalk8s-%(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True -o
          containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*
    - ShellCommand:
        name: Copy artifactsfor 'sosreport/single-node-upgrade-centos'
        command: mkdir -p artifacts/sosreport/single-node-upgrade-centos; for artifact
          in "/var/tmp/sosreport*"; then cp -r "$artifact" artifacts/sosreport/single-node-upgrade-centos;
          done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: "bash -c '\nDEBUG_STAGES=\"%(prop:debug)s\"\nDURATION=\"3600\"\n\
          if [ -z \"$DEBUG_STAGES\" ]; then\n    REASON=\"\"debug\" build property\
          \ not set\"\nelif [ \"$DEBUG_STAGES\" = all ]; then\n    RUN_STEP=1\n  \
          \  REASON=\"\"debug\" property set to \"all\"\"\nelif [[ \"$DEBUG_STAGES\"\
          \ =~ ^[a-z\\-]+(~[a-z\\-]+)*$ ]]; then\n    IFS=\"~\" read -ra SELECTED\
          \ <<< \"$DEBUG_STAGES\"\n    for selected in \"${SELECTED[@]}\"; do\n  \
          \  if [ \"$selected\" = \"single-node-upgrade-centos\" ]; then\n       \
          \ RUN_STEP=1\n        REASON=\"stage selected in \"$DEBUG_STAGES\"\"\n \
          \       break\n    fi\n    done\n    if [ \"$RUN_STEP\" -eq 0 ]; then\n\
          \    REASON=\"stage not in \"$DEBUG_STAGES\"\"\n    fi\nelse\n    REASON=\"\
          invalid \"debug\" property value\"\n    cat >&2 << EOF\nInvalid \"debug\"\
          \ build property value \"$DEBUG_STAGES\".\nMust use either:\n    - \"all\"\
          , to select all debug stages\n    - a single stage name\n    - a list of\
          \ stage names, separated by tilde signs \"~\",\n    e.g. \"single-node~multiple-nodes\"\
          .\nEOF\nfi\nif [ \"$RUN_STEP\" -eq 1 ]; then\n    echo \"Step $STEP_NAME\
          \ - wait $DURATION seconds\"\n    echo \"Reason: $REASON\"\n    sleep \"\
          $DURATION\"\nelse\n    echo \"Step $STEP_NAME - skip debug\"\n    echo \"\
          Reason: $REASON\"\nfi'"
        alwaysRun: true
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - sosreport/single-node-upgrade-centos
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node-upgrade-centos
        command: mkdir -p build_status/build_status/single-node-upgrade-centos &&
          echo 'SUCCESSFUL' > build_status/build_status/single-node-upgrade-centos/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  single-node-downgrade-centos:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node-downgrade-centos
        command: mkdir -p build_status/build_status/single-node-downgrade-centos &&
          echo 'FAILED' > build_status/build_status/single-node-downgrade-centos/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "bash -c '\nmkdir -p ~/.ssh\necho \"%(secret:ssh_pub_keys)s\" >>\
          \ ~/.ssh/authorized_keys\nIP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet\
          \ ([0-9.]+).*$/\x01/p' )\ncat << END\nConnect to this worker using:\n  \
          \  ssh eve@$IP\nEND'"
    - ShellCommand:
        name: Retrieve ISO image checksum
        command: curl -s -XGET -o "SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM"
    - ShellCommand:
        name: Retrieve ISO image
        command: "bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out of\
          \ 20\"\n  curl -s -XGET -o \"metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: sha256sum -c SHA256SUM
        workdir: .
    - ShellCommand:
        name: Retrieve ISO image checksum (pre)
        command: curl -s -XGET -o "/tmp/SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM"
    - ShellCommand:
        name: Retrieve ISO image (pre)
        command: "bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out of\
          \ 20\"\n  curl -s -XGET -o \"/tmp/metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum (pre)
        command: sha256sum -c SHA256SUM
        workdir: /tmp
    - ShellCommand:
        name: Create ISO mountpoint
        command: sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: sudo mount -o loop "metalk8s.iso" "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Create bootstrap configuration file
        command: "sudo bash -c '\nmkdir -p /etc/metalk8s\ncat > /etc/metalk8s/bootstrap.yaml\
          \ << END\napiVersion: metalk8s.scality.com/v1alpha2\nkind: BootstrapConfiguration\n\
          networks:\n  controlPlane: 10.100.0.0/16\n  workloadPlane: 10.100.0.0/16\n\
          ca:\n  minion: $(hostname)\napiServer:\n  host: $(ip route get 10.100.0.0\
          \ | awk '/10.100.0.0/{ print $6 }')\narchives:\n  - \"$(relpath 'metalk8s.iso')\"\
          \nEND'"
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version)s/bootstrap.sh"
          --verbose
        haltOnFailure: true
    - ShellCommand:
        name: Provision Prometheus and AlertManager storage
        command: 'sudo env PRODUCT_TXT=/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT=/srv/scality/metalk8s-%(prop:metalk8s_version)s bash eve/create-volumes.sh '
        env:
          PRODUCT_TXT: /srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT: /srv/scality/metalk8s-%(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests locally
        command: git checkout "$BRANCH" --quiet && tox -e tests-local  -- -m "post
          and ci and not multinode and not slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
        haltOnFailure: true
    - ShellCommand:
        name: Run slow tests locally
        command: git checkout "$BRANCH" --quiet && tox -e tests-local  -- -m "post
          and ci and not multinode and slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
        haltOnFailure: true
    - ShellCommand:
        name: Run Cypress tests
        command: bash cypress.sh
        env:
          IN_CI: 'True'
        workdir: build/ui
        haltOnFailure: true
    - ShellCommand:
        name: Copy artifacts for 'ui/cypress'
        command: mkdir -p artifacts/ui/cypress; for artifact in "ui/cypress/screenshots
          ui/cypress/videos"; then cp -r "$artifact" artifacts/ui/cypress; done
    - ShellCommand:
        name: Copy artifacts for 'ui'
        command: mkdir -p artifacts/ui; for artifact in "ui/junit"; then cp -r "$artifact"
          artifacts/ui; done
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in "ui/cypress ui"; then cp -r "$artifact"
          artifacts; done
    - ShellCommand:
        name: Add ISO to cluster
        command: sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version)s/iso-manager.sh"
          --archive "$(readlink -f "/tmp/metalk8s.iso")"
        haltOnFailure: true
    - ShellCommand:
        name: Run downgrade to previous version
        command: sudo bash /srv/scality/metalk8s-%(prop:metalk8s_version)s/downgrade.sh
          --destination-version %(prop:metalk8s_version_prev)s
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests locally for previous version
        command: git checkout "$BRANCH" --quiet && tox -e tests-local  -- -m "post
          and ci and not multinode and not slow"
        env:
          BRANCH: development/%(prop:product_version_prev)s
          ISO_MOUNTPOINT: /srv/scality/metalk8s-%(prop:metalk8s_version_prev)s
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True -o
          containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*
    - ShellCommand:
        name: Copy artifactsfor 'sosreport/single-node-downgrade-centos'
        command: mkdir -p artifacts/sosreport/single-node-downgrade-centos; for artifact
          in "/var/tmp/sosreport*"; then cp -r "$artifact" artifacts/sosreport/single-node-downgrade-centos;
          done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: "bash -c '\nDEBUG_STAGES=\"%(prop:debug)s\"\nDURATION=\"3600\"\n\
          if [ -z \"$DEBUG_STAGES\" ]; then\n    REASON=\"\"debug\" build property\
          \ not set\"\nelif [ \"$DEBUG_STAGES\" = all ]; then\n    RUN_STEP=1\n  \
          \  REASON=\"\"debug\" property set to \"all\"\"\nelif [[ \"$DEBUG_STAGES\"\
          \ =~ ^[a-z\\-]+(~[a-z\\-]+)*$ ]]; then\n    IFS=\"~\" read -ra SELECTED\
          \ <<< \"$DEBUG_STAGES\"\n    for selected in \"${SELECTED[@]}\"; do\n  \
          \  if [ \"$selected\" = \"single-node-downgrade-centos\" ]; then\n     \
          \   RUN_STEP=1\n        REASON=\"stage selected in \"$DEBUG_STAGES\"\"\n\
          \        break\n    fi\n    done\n    if [ \"$RUN_STEP\" -eq 0 ]; then\n\
          \    REASON=\"stage not in \"$DEBUG_STAGES\"\"\n    fi\nelse\n    REASON=\"\
          invalid \"debug\" property value\"\n    cat >&2 << EOF\nInvalid \"debug\"\
          \ build property value \"$DEBUG_STAGES\".\nMust use either:\n    - \"all\"\
          , to select all debug stages\n    - a single stage name\n    - a list of\
          \ stage names, separated by tilde signs \"~\",\n    e.g. \"single-node~multiple-nodes\"\
          .\nEOF\nfi\nif [ \"$RUN_STEP\" -eq 1 ]; then\n    echo \"Step $STEP_NAME\
          \ - wait $DURATION seconds\"\n    echo \"Reason: $REASON\"\n    sleep \"\
          $DURATION\"\nelse\n    echo \"Step $STEP_NAME - skip debug\"\n    echo \"\
          Reason: $REASON\"\nfi'"
        alwaysRun: true
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - sosreport/single-node-downgrade-centos
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node-downgrade-centos
        command: mkdir -p build_status/build_status/single-node-downgrade-centos &&
          echo 'SUCCESSFUL' > build_status/build_status/single-node-downgrade-centos/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  single-node-install-rhel:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node-rhel
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node-install-rhel
        command: mkdir -p build_status/build_status/single-node-install-rhel && echo
          'FAILED' > build_status/build_status/single-node-install-rhel/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "bash -c '\nmkdir -p ~/.ssh\necho \"%(secret:ssh_pub_keys)s\" >>\
          \ ~/.ssh/authorized_keys\nIP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet\
          \ ([0-9.]+).*$/\x01/p' )\ncat << END\nConnect to this worker using:\n  \
          \  ssh eve@$IP\nEND'"
    - ShellCommand:
        name: Download and install Terraform
        command: curl --retry 5 -O "https://releases.hashicorp.com/terraform/0.12.3/terraform_0.12.3_linux_amd64.zip"
          && sudo unzip "terraform_0.12.3_linux_amd64.zip" -d /usr/local/sbin/ &&
          rm -f "terraform_0.12.3_linux_amd64.zip"
        haltOnFailure: true
    - ShellCommand:
        name: Check that Terraform was installed
        command: if ! terraform --version 2&> /dev/null; then  echo "Aborting - Terraform
          not installed and required" >&2;  exit 1;fi
        haltOnFailure: true
    - ShellCommand:
        name: Initialize Terraform
        command: for _ in $(seq 1 12); do  if terraform init; then    break;  else    rm
          -rf .terraform/;    sleep 5;  fi;done;
        haltOnFailure: true
    - ShellCommand:
        name: Validate Terraform deployment description
        command: terraform validate
        haltOnFailure: true
    - ShellCommand:
        name: Spawn OpenStack virtual infrastructure with Terraform
        command: terraform apply -auto-approve
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
        haltOnFailure: true
    - ShellCommand:
        name: Retrieve ISO image checksum
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "curl -s -XGET -o "SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM""
    - ShellCommand:
        name: Retrieve ISO image
        command: "ssh -F None None eve/workers/openstack-single-node-rhel/terraform/ssh_config\
          \ bootstrap bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out\
          \ of 20\"\n  curl -s -XGET -o \"metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "sha256sum -c SHA256SUM"
        workdir: .
    - ShellCommand:
        name: Create ISO mountpoint
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s""
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "sudo mount -o loop "/tmp/metalk8s.iso" "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s""
        haltOnFailure: true
    - ShellCommand:
        name: Create bootstrap configuration file
        command: "ssh -F None None eve/workers/openstack-single-node-rhel/terraform/ssh_config\
          \ bootstrap sudo bash -c '\nmkdir -p /etc/metalk8s\ncat > /etc/metalk8s/bootstrap.yaml\
          \ << END\napiVersion: metalk8s.scality.com/v1alpha2\nkind: BootstrapConfiguration\n\
          networks:\n  controlPlane: 10.100.0.0/16\n  workloadPlane: 10.100.0.0/16\n\
          ca:\n  minion: $(hostname)\napiServer:\n  host: $(ip route get 10.100.0.0\
          \ | awk '/10.100.0.0/{ print $6 }')\narchives:\n  - \"$(relpath '/tmp/metalk8s.iso')\"\
          \nEND'"
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s/bootstrap.sh"
          --verbose"
        haltOnFailure: true
    - ShellCommand:
        name: Provision Prometheus and AlertManager storage
        command: 'ssh -F None None eve/workers/openstack-single-node-rhel/terraform/ssh_config
          bootstrap [[ -f "eve/create-volumes.sh"]] || scp None -F eve/workers/openstack-single-node-rhel/terraform/ssh_config
          eve/create-volumes.sh bootstrap:eve/create-volumes.sh && ssh -F None None
          eve/workers/openstack-single-node-rhel/terraform/ssh_config bootstrap ssh
          -F None None eve/workers/openstack-single-node-rhel/terraform/ssh_config
          bootstrap sudo env PRODUCT_TXT=/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT=/srv/scality/metalk8s-%(prop:metalk8s_version)s bash eve/create-volumes.sh '
        env:
          PRODUCT_TXT: /srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT: /srv/scality/metalk8s-%(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests
        command: git checkout "$BRANCH" --quiet && tox -e tests  -- -m "post and ci
          and not multinode and not slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
          SSH_CONFIG: eve/workers/openstack-single-node-rhel/terraform/ssh_config
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: ssh -F "eve/workers/openstack-single-node-rhel/terraform/ssh_config"
          "bootstrap" "sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True
          -o containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown cloud-user:cloud-user /var/tmp/sosreport*"
    - ShellCommand:
        name: Copy artifactsfor 'sosreport/single-node-install-rhel'
        command: mkdir -p artifacts/sosreport/single-node-install-rhel; for artifact
          in "/var/tmp/sosreport*"; then scp None -F eve/workers/openstack-single-node-rhel/terraform/ssh_config
          bootstrap:$artifact artifacts/sosreport/single-node-install-rhel; done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: "bash -c '\nDEBUG_STAGES=\"%(prop:debug)s\"\nDURATION=\"3600\"\n\
          if [ -z \"$DEBUG_STAGES\" ]; then\n    REASON=\"\"debug\" build property\
          \ not set\"\nelif [ \"$DEBUG_STAGES\" = all ]; then\n    RUN_STEP=1\n  \
          \  REASON=\"\"debug\" property set to \"all\"\"\nelif [[ \"$DEBUG_STAGES\"\
          \ =~ ^[a-z\\-]+(~[a-z\\-]+)*$ ]]; then\n    IFS=\"~\" read -ra SELECTED\
          \ <<< \"$DEBUG_STAGES\"\n    for selected in \"${SELECTED[@]}\"; do\n  \
          \  if [ \"$selected\" = \"single-node-install-rhel\" ]; then\n        RUN_STEP=1\n\
          \        REASON=\"stage selected in \"$DEBUG_STAGES\"\"\n        break\n\
          \    fi\n    done\n    if [ \"$RUN_STEP\" -eq 0 ]; then\n    REASON=\"stage\
          \ not in \"$DEBUG_STAGES\"\"\n    fi\nelse\n    REASON=\"invalid \"debug\"\
          \ property value\"\n    cat >&2 << EOF\nInvalid \"debug\" build property\
          \ value \"$DEBUG_STAGES\".\nMust use either:\n    - \"all\", to select all\
          \ debug stages\n    - a single stage name\n    - a list of stage names,\
          \ separated by tilde signs \"~\",\n    e.g. \"single-node~multiple-nodes\"\
          .\nEOF\nfi\nif [ \"$RUN_STEP\" -eq 1 ]; then\n    echo \"Step $STEP_NAME\
          \ - wait $DURATION seconds\"\n    echo \"Reason: $REASON\"\n    sleep \"\
          $DURATION\"\nelse\n    echo \"Step $STEP_NAME - skip debug\"\n    echo \"\
          Reason: $REASON\"\nfi'"
        alwaysRun: true
    - ShellCommand:
        name: Destroy Terraform-deployed infrastructure
        command: for _ in $(seq 1 3); do  terraform destroy -auto-approve && break;done;
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
        workdir: eve/workers/openstack-single-node-rhel/terraform
        sigtermTime: 600
        alwaysRun: true
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - sosreport/single-node-install-rhel
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node-install-rhel
        command: mkdir -p build_status/build_status/single-node-install-rhel && echo
          'SUCCESSFUL' > build_status/build_status/single-node-install-rhel/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
  multiple-nodes:
    worker:
      type: openstack
      path: eve/workers/openstack-multiple-nodes
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'FAILED'
          > build_status/build_status/multiple-nodes/final_status
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "bash -c '\nmkdir -p ~/.ssh\necho \"%(secret:ssh_pub_keys)s\" >>\
          \ ~/.ssh/authorized_keys\nIP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet\
          \ ([0-9.]+).*$/\x01/p' )\ncat << END\nConnect to this worker using:\n  \
          \  ssh eve@$IP\nEND'"
    - ShellCommand:
        name: Check if unzip and curl are installed
        command: if "! {dep} -h 2&> /dev/null"; then echo "Aborting - {dep} not installed
          and required" >&2; exit 1; None; done; if "! {dep} -h 2&> /dev/null"; then
          echo "Aborting - {dep} not installed and required" >&2; exit 1; None; done
        haltOnFailure: true
    - ShellCommand:
        name: Download and install Terraform
        command: curl --retry 5 -O "https://releases.hashicorp.com/terraform/0.12.3/terraform_0.12.3_linux_amd64.zip"
          && sudo unzip "terraform_0.12.3_linux_amd64.zip" -d /usr/local/sbin/ &&
          rm -f "terraform_0.12.3_linux_amd64.zip"
        haltOnFailure: true
    - ShellCommand:
        name: Check that Terraform was installed
        command: if ! terraform --version 2&> /dev/null; then  echo "Aborting - Terraform
          not installed and required" >&2;  exit 1;fi
        haltOnFailure: true
    - ShellCommand:
        name: Initialize Terraform
        command: for _ in $(seq 1 12); do  if terraform init; then    break;  else    rm
          -rf .terraform/;    sleep 5;  fi;done;
        haltOnFailure: true
    - ShellCommand:
        name: Validate Terraform deployment description
        command: terraform validate
        haltOnFailure: true
    - ShellCommand:
        name: Spawn OpenStack virtual infrastructure with Terraform
        command: terraform apply -auto-approve
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
          TF_VAR_nodes_count: '2'
        haltOnFailure: true
    - ShellCommand:
        name: Send bastion public key to nodes
        command: for target_host in "bootstrap node1"; then scp -3 -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bastion:.ssh/bastion.pub $target_host:.ssh/ && ssh -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          $target_host cat .ssh/bastion.pub >> .ssh/authorized_keys; done
    - ShellCommand:
        name: Send bastion private key to bootstrap
        command: ssh -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap sudo mkdir -p /etc/metalk8s/pki && scp -3 -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bastion:.ssh/bastion bootstrap:./ && ssh -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          $target_host sudo mv bastion /etc/metalk8s/pki/
    - ShellCommand:
        name: Retrieve ISO image checksum
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "curl -s -XGET -o "SHA256SUM" "%(prop:artifacts_private_url)s/SHA256SUM""
    - ShellCommand:
        name: Retrieve ISO image
        command: "ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config\
          \ bootstrap bash -c '\nfor ((i=1;i<=20;i++)); do\n  echo \"Attempt $i out\
          \ of 20\"\n  curl -s -XGET -o \"metalk8s.iso\" \"%(prop:artifacts_private_url)s/metalk8s.iso\"\
          \ && exit\n  sleep 2\ndone\necho \"Could not retrieve ISO after 20 attempts\"\
          \ >&2\nexit 1'"
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "sha256sum -c SHA256SUM"
        workdir: .
    - ShellCommand:
        name: Create ISO mountpoint
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version)s""
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "sudo mount -o loop "metalk8s.iso" "/srv/scality/metalk8s-%(prop:metalk8s_version)s""
        haltOnFailure: true
    - ShellCommand:
        name: Create bootstrap configuration file
        command: "ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config\
          \ bootstrap sudo bash -c '\nmkdir -p /etc/metalk8s\ncat > /etc/metalk8s/bootstrap.yaml\
          \ << END\napiVersion: metalk8s.scality.com/v1alpha2\nkind: BootstrapConfiguration\n\
          networks:\n  controlPlane: 10.100.0.0/16\n  workloadPlane: 10.100.0.0/16\n\
          ca:\n  minion: $(hostname)\napiServer:\n  host: $(ip route get 10.100.0.0\
          \ | awk '/10.100.0.0/{ print $6 }')\narchives:\n  - \"$(relpath 'metalk8s.iso')\"\
          \nEND'"
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "sudo bash "/srv/scality/metalk8s-%(prop:metalk8s_version)s/bootstrap.sh"
          --verbose"
        haltOnFailure: true
    - ShellCommand:
        name: Provision Prometheus and AlertManager storage
        command: 'ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap [[ -f "eve/create-volumes.sh"]] || scp None -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          eve/create-volumes.sh bootstrap:eve/create-volumes.sh && ssh -F None None
          eve/workers/openstack-multiple-nodes/terraform/ssh_config bootstrap ssh
          -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config bootstrap
          sudo env PRODUCT_TXT=/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT=/srv/scality/metalk8s-%(prop:metalk8s_version)s bash eve/create-volumes.sh '
        env:
          PRODUCT_TXT: /srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt
          PRODUCT_MOUNT: /srv/scality/metalk8s-%(prop:metalk8s_version)s
        haltOnFailure: true
    - ShellCommand:
        name: Install kubectl
        command: ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap yum install -y kubectl --disablerepo=* --enablerepo=metalk8s-kubernetes
    - ShellCommand:
        name: Enable IP-in-IP encapsulation for Calico
        command: 'ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap [[ -f "/home/centos/scripts/enable_ipip.sh"]] || scp None -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          /home/centos/scripts/enable_ipip.sh bootstrap:/home/centos/scripts/enable_ipip.sh
          && ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap bash /home/centos/scripts/enable_ipip.sh '
    - ShellCommand:
        name: Run installation scenarii
        command: ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bastion git checkout "$BRANCH" --quiet && tox -e tests  -- -m "install and
          ci and multinodes"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
          SSH_CONFIG: eve/workers/openstack-multiple-nodes/terraform/ssh_config
        haltOnFailure: true
    - ShellCommand:
        name: Run fast tests
        command: ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bastion git checkout "$BRANCH" --quiet && tox -e tests  -- -m "post and
          ci and multinodes and not slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
          SSH_CONFIG: eve/workers/openstack-multiple-nodes/terraform/ssh_config
        haltOnFailure: true
    - ShellCommand:
        name: Run slow tests
        command: ssh -F None None eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bastion git checkout "$BRANCH" --quiet && tox -e tests  -- -m "post and
          ci and multinodes and slow"
        env:
          BRANCH: '%(prop:branch)s'
          ISO_MOUNTPOINT: *id003
          SSH_CONFIG: eve/workers/openstack-multiple-nodes/terraform/ssh_config
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "bootstrap" "sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True
          -o containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*"
    - ShellCommand:
        name: Copy artifactsfor 'sosreport/single-multiple-nodes/bootstrap'
        command: mkdir -p artifacts/sosreport/single-multiple-nodes/bootstrap; for
          artifact in "/var/tmp/sosreport*"; then scp None -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          bootstrap:$artifact artifacts/sosreport/single-multiple-nodes/bootstrap;
          done
    - ShellCommand:
        name: Collect logs using sosreport
        command: ssh -F "eve/workers/openstack-multiple-nodes/terraform/ssh_config"
          "node1" "sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True -o
          containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*"
    - ShellCommand:
        name: Copy artifactsfor 'sosreport/single-multiple-nodes/node1'
        command: mkdir -p artifacts/sosreport/single-multiple-nodes/node1; for artifact
          in "/var/tmp/sosreport*"; then scp None -F eve/workers/openstack-multiple-nodes/terraform/ssh_config
          node1:$artifact artifacts/sosreport/single-multiple-nodes/node1; done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: "bash -c '\nDEBUG_STAGES=\"%(prop:debug)s\"\nDURATION=\"14400\"\n\
          if [ -z \"$DEBUG_STAGES\" ]; then\n    REASON=\"\"debug\" build property\
          \ not set\"\nelif [ \"$DEBUG_STAGES\" = all ]; then\n    RUN_STEP=1\n  \
          \  REASON=\"\"debug\" property set to \"all\"\"\nelif [[ \"$DEBUG_STAGES\"\
          \ =~ ^[a-z\\-]+(~[a-z\\-]+)*$ ]]; then\n    IFS=\"~\" read -ra SELECTED\
          \ <<< \"$DEBUG_STAGES\"\n    for selected in \"${SELECTED[@]}\"; do\n  \
          \  if [ \"$selected\" = \"multiple-nodes\" ]; then\n        RUN_STEP=1\n\
          \        REASON=\"stage selected in \"$DEBUG_STAGES\"\"\n        break\n\
          \    fi\n    done\n    if [ \"$RUN_STEP\" -eq 0 ]; then\n    REASON=\"stage\
          \ not in \"$DEBUG_STAGES\"\"\n    fi\nelse\n    REASON=\"invalid \"debug\"\
          \ property value\"\n    cat >&2 << EOF\nInvalid \"debug\" build property\
          \ value \"$DEBUG_STAGES\".\nMust use either:\n    - \"all\", to select all\
          \ debug stages\n    - a single stage name\n    - a list of stage names,\
          \ separated by tilde signs \"~\",\n    e.g. \"single-node~multiple-nodes\"\
          .\nEOF\nfi\nif [ \"$RUN_STEP\" -eq 1 ]; then\n    echo \"Step $STEP_NAME\
          \ - wait $DURATION seconds\"\n    echo \"Reason: $REASON\"\n    sleep \"\
          $DURATION\"\nelse\n    echo \"Step $STEP_NAME - skip debug\"\n    echo \"\
          Reason: $REASON\"\nfi'"
        alwaysRun: true
    - ShellCommand:
        name: Destroy Terraform-deployed infrastructure
        command: for _ in $(seq 1 3); do  terraform destroy -auto-approve && break;done;
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
        workdir: eve/workers/openstack-multiple-nodes/terraform
        sigtermTime: 600
        alwaysRun: true
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - sosreport/multiple-nodes
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'SUCCESSFUL'
          > build_status/build_status/multiple-nodes/final_status
        haltOnFailure: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
