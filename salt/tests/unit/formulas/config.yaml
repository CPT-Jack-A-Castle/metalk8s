---
# Default context options are listed here.
# Please be mindful of the number of cases generated, as these will apply to
# many formulas.
default_opts:
  os:
    - CentOS/7
  saltenv:
    - __default__  # Will use "metalk8s-{{ pillar.metalk8s.cluster_version }}"
  minion_state:
    - ready
  volumes:
    - none

metalk8s:
  # Use the special `_skip` keyword to omit rendering of a directory or formula
  _skip: true

  map.jinja:
    _skip: false
    _opts:
      os:
        - CentOS/7
        - RedHat/7
        - RedHat/8
        - Ubuntu/18

  addons:
    dex:
      _skip: false

      deployed:
        service-configuration.sls:
          _opts:
            k8s_overrides:
              - "No service configuration (default)": {}
              - "Existing service configuration (v1alpha2)":
                  add:
                    - &dex_service_conf
                      kind: ConfigMap
                      apiVersion: v1
                      metadata:
                        name: metalk8s-dex-config
                        namespace: metalk8s-auth
                      data:
                        config.yaml: |-
                          apiVersion: addons.metalk8s.scality.com/v1alpha2
                          kind: DexConfig
                          spec: {}
              - "Old service configuration (v1alpha1)":
                  add:
                    - <<: *dex_service_conf
                      data:
                        config.yaml: |-
                          apiVersion: addons.metalk8s.scality.com/v1alpha1
                          kind: DexConfig
                          spec: {}
              - "Unknown service configuration version":
                  add:
                    - <<: *dex_service_conf
                      data:
                        config.yaml: |-
                          apiVersion: addons.metalk8s.scality.com/v1
                          kind: DexConfig
                          spec: {}


  archives:
    _skip: false

  beacon:
    _skip: false

  container-engine:
    _skip: false

    containerd:
      files:
        50-metalk8s.conf.j2:
          _opts:
            extra_context:
              - "From metalk8s.container-engine.containerd.installed":
                  containerd_args: [--log-level, info]
                  environment:
                    NO_PROXY: localhost,127.0.0.1,10.0.0.0/16
                    HTTP_PROXY: http://my-proxy.local
                    HTTPS_PROXY: https://my-proxy.local

  internal:
    _skip: false

  kubectl:
    _skip: false

  kubernetes:
    _skip: false

    apiserver-proxy:
      files:
        apiserver-proxy.yaml.j2:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.apiserver-proxy.installed":
                  image_name: >-
                    metalk8s-registry-from-config.invalid/metalk8s-2.7.1/nginx:1.2.3
                  config_digest: abcdefgh12345
                  metalk8s_version: "2.7.1"

    etcd:
      files:
        manifest.yaml.j2:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.etcd.installed":
                  name: etcd
                  image_name: >-
                    metalk8s-registry-from-config.invalid/metalk8s-2.7.1/etcd:3.4.3
                  command: [etcd, --some-arg, --some-more-args=toto]
                  volumes:
                    - path: /var/lib/etcd
                      name: etcd-data
                    - path: /etc/kubernetes/pki/etcd
                      name: etcd-certs
                      readOnly: true
                  etcd_healthcheck_cert: >-
                    /etc/kubernetes/pki/etcd/healthcheck-client.crt
                  metalk8s_version: "2.7.1"
                  config_digest: abcdefgh12345

    files:
      control-plane-manifest.yaml.j2:
        _opts:
          extra_context:
            - "From metalk8s.kubernetes.scheduler.installed":
                name: kube-scheduler
                image_name: >-
                  metalk8s-registry-from-config.invalid/metalk8s-2.7.1/kube-scheduler:1.18.5
                host: "10.0.0.1"
                port: http-metrics
                scheme: HTTP
                command:
                  - kube-scheduler
                  - --address=10.0.0.1
                  - --kubeconfig=/etc/kubernetes/scheduler.conf
                  - --leader-elect=true
                  - --v=0
                requested_cpu: 100m
                ports:
                  - name: http-metrics
                    containerPort: 10251
                volumes:
                  - path: /etc/kubernetes/scheduler.conf
                    name: kubeconfig
                    type: File
                metalk8s_version: "2.7.1"
                config_digest: abcdefgh12345

    kubelet:
      files:
        kubeadm.env.j2:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.kubelet.standalone":
                  options:
                    container-runtime: remote
                    container-runtime-endpoint: >-
                      unix:///run/containerd/containerd.sock
                    node-ip: "10.0.0.1"
                    hostname-override: bootstrap
                    v: 0

        service-systemd.conf.j2:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.kubelet.configured":
                  kubeconfig: /etc/kubernetes/kubelet.conf
                  config_file: /var/lib/kubelet/config.yaml
                  env_file: /var/lib/kubelet/kubeadm-flags.env

        service-standalone-systemd.conf.j2:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.kubelet.standalone":
                  env_file: /var/lib/kubelet/kubeadm-flags.env
                  manifest_path: /etc/kubernetes/manifests

    mark-control-plane:
      files:
        bootstrap_node_update.yaml.j2.in:
          _opts:
            extra_context:
              - "From metalk8s.kubernetes.mark-control-plane.deployed":
                  node_name: bootstrap
                  cri_socket: unix:///run/containerd/containerd.sock

      deployed.sls:
        _opts:
          pillar_overrides:
            - example:
                bootstrap_id: bootstrap

  node:
    _skip: false

    grains.sls:
      _opts:
        minion_state:
          - ready
          - new

  reactor:
    _skip: false

    certs:
      renew.sls.in:
        _opts:
          extra_context:
            - cert-beacon-event:
                data:
                  id: bootstrap
                  certificates:
                    - cert_path: /path/to/cert.pem
                    - cert_path: /path/to/other.pem

  repo:
    _skip: false

    files:
      apt.sources.list.j2:
        _opts:
          extra_context:
            - "From metalk8s.repo.debian":
                type: deb
                options:
                  trusted: "yes"
                url: http://10.0.0.1:8080/metalk8s-2.7.1/debian/metalk8s-bionic
                distribution: Ubuntu 18.04 Bionic Beaver
                components: ["metalk8s-bionic"]

      metalk8s-registry-config.inc.j2:
        _opts:
          extra_context:
            - "From metalk8s.repo.configured":
                archives: &example_archives
                  metalk8s-2.7.1:
                    iso: /archives/metalk8s.iso
                    path: /srv/scality/metalk8s-2.7.1
                    version: "2.7.1"

      nginx.conf.j2:
        _opts:
          extra_context:
            - "From metalk8s.repo.configured":
                listening_address: "10.0.0.1"
                listening_port: 8080

      repositories-manifest.yaml.j2:
        _opts:
          extra_context:
            - "From metalk8s.repo.installed":
                container_port: 8080
                image: >-
                  metalk8s-registry-from-config.invalid/metalk8s-2.7.1/nginx:1.2.3
                name: repositories
                version: "1.0.0"
                archives: *example_archives
                solutions: {}
                package_path: /packages
                image_path: /images/
                nginx_confd_path: /var/lib/metalk8s/repositories/conf.d
                probe_host: "10.0.0.1"
                metalk8s_version: "2.7.1"
                config_digest: abcdefgh12345

    debian.sls:
      _opts:
        os: ["Ubuntu/18"]
    redhat.sls:
      _opts:
        os: ["CentOS/7", "RedHat/7", "RedHat/8"]

  roles:
    _skip: false

  salt:
    _skip: false

    master:
      certs:
        salt-api.sls:
          _opts:
            minion_state:
              - standalone
              - ready

      files:
        master-99-metalk8s.conf.j2:
          _opts:
            extra_context:
              - "From metalk8s.salt.master.configured":
                  debug: true
                  salt_ip: "10.0.0.1"
                  kubeconfig: /etc/salt/master-kubeconfig.conf
                  salt_api_ssl_crt: /etc/salt/pki/api/salt-api.crt
                  saltenv: metalk8s-2.7.1

        salt-master-manifest.yaml.j2:
          _opts:
            extra_context:
              - "From metalk8s.salt.master.installed":
                  debug: true
                  image: salt-master
                  version: "3002.2"
                  archives:
                    metalk8s-2.7.1:
                      path: /srv/scality/metalk8s-2.7.1
                      iso: /archives/metalk8s-2.7.1
                      version: "2.7.1"
                  solution_archives:
                    example-solution-1-2-3: /srv/scality/example-solution-1.2.3
                  salt_ip: "10.0.0.1"
                  config_digest: abcdefgh12345
                  metalk8s_version: "2.7.1"

    minion:
      files:
        minion-99-metalk8s.conf.j2:
          _opts:
            extra_context:
              - "From metalk8s.salt.minion.configured":
                  debug: true
                  master_hostname: "10.233.0.123"
                  minion_id: bootstrap
                  saltenv: metalk8s-2.7.1

  service-configuration:
    _skip: false

  solutions:
    _skip: false

    available.sls:
      _opts:
        pillar_overrides:
          - "Initial state (errors)":
              metalk8s:
                solutions:
                  _errors: [Cannot read config file]
                  available: {}
                  config:
                    _errors: [Cannot read config file]

          # See ./data/base_pillar.yaml
          - "Empty config (default)": {}

          - "New archive in config":
              metalk8s:
                solutions:
                  available:
                    example-solution:
                      - &example_solution
                        archive: >-
                          /srv/scality/releases/example-solution-1.0.0.iso
                        name: example-solution
                        version: "1.0.0"
                        id: example-solution-1.0.0
                        active: true
                        mountpoint: /srv/scality/example-solution-1.0.0
                  config:
                    archives:
                      - /srv/scality/releases/example-solution-1.0.0.iso
                      - /srv/scality/releases/example-solution-1.2.0.iso

          - "Active archive removed from config":
              metalk8s:
                solutions:
                  available:
                    example-solution:
                      - *example_solution
                  config:
                    archives: []

          - "Inactive archive removed from config":
              metalk8s:
                solutions:
                  available:
                    example-solution:
                      - *example_solution
                      - archive: >-
                          /srv/scality/releases/example-solution-1.2.0.iso
                        name: example-solution
                        version: "1.2.0"
                        id: example-solution-1.2.0
                        active: false
                        mountpoint: /srv/scality/example-solution-1.2.0
                  config:
                    archives:
                      - /srv/scality/releases/example-solution-1.0.0.iso

  sreport:
    _skip: false

  utils:
    _skip: false

    httpd-tools:
      installed.sls:
        _opts:
          os: ["CentOS/7", "Ubuntu/18"]

  volumes:
    _skip: false

    _opts:
      pillar_overrides:
        - "No target volume (default)": {}
        - "Target a single volume":
            volume: bootstrap-prometheus

    unprepared.sls:
      _opts:
        volumes:
          - none
          - errors
          - sparse
          - block
          - mix

    prepared.sls:
      _opts:
        volumes:
          - none
          - errors
          - bootstrap
          - sparse
          - block
          - mix
