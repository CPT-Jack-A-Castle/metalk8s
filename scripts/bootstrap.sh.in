#!/bin/bash

set -e
set -u
# The trickery below is to only run `set -o pipefail`, which is a Bash'ism,
# when running in Bash and not some other `sh` which doesn't necessarily
# support `-o pipefail` (though must support `-e` and `-u` per POSIX).
if test -z "$(type -p)"; then set -o pipefail; fi

RPM=${RPM:-$(command -v rpm)}
SYSTEMCTL=${SYSTEMCTL:-$(command -v systemctl)}
YUM=${YUM:-$(command -v yum)}
SALT_CALL=${SALT_CALL:-salt-call}

SALT_MINION_FILE_CLIENT_LOCAL_CONF=/etc/salt/minion.d/99-file-client-local.conf
# shellcheck disable=SC2034
SALT_MASTER_FILE_CONF=/etc/salt/master.d/99-metalk8s.conf
# shellcheck disable=SC2034
SALT_MINION_FILE_CONF=/etc/salt/minion.d/99-metalk8s.conf

declare -A GPGCHECK_REPOSITORIES=(
    [metalk8s-base]=1
    [metalk8s-epel]=1
    [metalk8s-external]=0
    [metalk8s-extras]=1
    [metalk8s-updates]=1
    [metalk8s-kubernetes]=1
    [metalk8s-saltstack]=1
    [metalk8s-scality]=0
)

die() {
    echo 1>&2 "$@"
    exit 1
}

pre_minion_checks() {
    test "x$(whoami)" = "xroot" || die "Script must run as root"
    test -n "${RPM}" || die "rpm not found"
    test -x "${RPM}" || die "rpm at '${RPM}' is not executable"
    test -n "${SYSTEMCTL}" || die "systemctl not found"
    test -x "${SYSTEMCTL}" || die "systemctl at '${SYSTEMCTL}' is not executable"
    test -n "${YUM}" || die "yum not found"
    test -x "${YUM}" || die "yum at '${YUM}' is not executable"
}

disable_salt_minion_service() {
    ${SYSTEMCTL} disable salt-minion.service 2>/dev/null || true
}

stop_salt_minion_service() {
    ${SYSTEMCTL} stop salt-minion.service 2>/dev/null || true
}

configure_yum_repositories() {
    configure_yum_local_repositories

    "$YUM" clean all
}

configure_yum_local_repositories() {
    for repository in "${!GPGCHECK_REPOSITORIES[@]}"; do
        configure_yum_local_repository "$repository" \
            "${GPGCHECK_REPOSITORIES[$repository]}"
    done
}

configure_yum_local_repository() {
    local -r repo_name=$1 gpgcheck=${2:-0}
    local -r repo_path=/srv/scality/metalk8s-@@VERSION/packages/$repo_name-el7
    local gpg_keys

    gpg_keys=$(
        find "$repo_path" -maxdepth 1 -name "RPM-GPG-KEY-*" \
            -printf "file://%p "
    )

    cat > /etc/yum.repos.d/"$repo_name".repo << EOF
[$repo_name]
name=$repo_name
baseurl=file://$repo_path
enabled=0
gpgcheck=$gpgcheck
${gpg_keys:+gpgkey=${gpg_keys%?}}
EOF
}

install_salt_minion() {
    local -a yum_opts=(
        '--assumeyes'
        '--disablerepo=*'
        '--enablerepo=metalk8s-*'
    )

    "$YUM" install "${yum_opts[@]}" salt-minion
}

configure_salt_minion_local_mode() {
    "$SALT_CALL" --file-root=/srv/scality/metalk8s-@@VERSION/salt \
        --local --retcode-passthrough saltutil.sync_all

    cat > "${SALT_MINION_FILE_CLIENT_LOCAL_CONF}" << EOF
file_roots:
  metalk8s-@@VERSION:
    - /srv/scality/metalk8s-@@VERSION/salt
pillar_roots:
  metalk8s-@@VERSION:
    - /srv/scality/metalk8s-@@VERSION/pillar

# use new module.run format
use_superseded:
  - module.run

ext_pillar_first: true
ext_pillar:
  - metalk8s: /etc/metalk8s/bootstrap.yaml

retry_dns_count: 3
EOF
}

get_salt_container() {
    local -r max_retries=10
    local salt_container='' attempts=0

    while [ -z "$salt_container" ] && [ $attempts -lt $max_retries ]; do
        salt_container="$(crictl ps -q \
            --label io.kubernetes.pod.namespace=kube-system \
            --label io.kubernetes.container.name=salt-master \
            --state Running)"
        (( attempts++ ))
    done

    if [ -z "$salt_container" ]; then
        echo "Failed to find a running 'salt-master' container" >&2
        exit 1
    fi

    echo "$salt_container"
}

orchestrate_bootstrap() {
    # Grains must be set (in `/etc/salt/grains`) *before* invoking `salt-call`,
    # otherwise grains set during execution won't be taken into account
    # properly.
    ${SALT_CALL} --local --state-output=mixed --retcode-passthrough state.sls \
        metalk8s.node.grains \
        saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION

    local -r control_plane_ip=$(
        ${SALT_CALL} --local grains.get metalk8s:control_plane_ip --out txt \
        | awk '/^local\: /{ print $2 }'
    )

    pillar=(
      "{"
      "  'repo': {'local_mode': True},"
      "  'registry_ip': $control_plane_ip,"
      "  'metalk8s': {"
      "    'endpoints': {"
      "      'salt-master': {'ip': $control_plane_ip}"
      "    }"
      "  }"
      "}"
    )

    ${SALT_CALL} --local --state-output=mixed --retcode-passthrough state.sls \
        '["metalk8s.roles.minion", "metalk8s.roles.bootstrap"]' \
        saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"

    SALT_MASTER_CALL="crictl exec -i $(get_salt_container)"

    ${SALT_MASTER_CALL} salt-run --state-output=mixed saltutil.sync_pillar \
        saltenv=metalk8s-@@VERSION
    ${SALT_MASTER_CALL} salt-run --state-output=mixed saltutil.sync_runners \
        saltenv=metalk8s-@@VERSION

    local -r bootstrap_id=$(
        ${SALT_CALL} --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )

    pillar=(
      "{"
      "  'bootstrap_id': '$bootstrap_id'"
      "}"
    )

    ${SALT_MASTER_CALL} salt-run --state-output=mixed state.orchestrate \
        metalk8s.orchestrate.bootstrap.accept-minion \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"

    ${SALT_MASTER_CALL} salt-run --state-output=mixed state.orchestrate \
        metalk8s.orchestrate.bootstrap \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"
}

main() {
    pre_minion_checks
    disable_salt_minion_service
    stop_salt_minion_service
    configure_yum_repositories
    install_salt_minion
    configure_salt_minion_local_mode

    orchestrate_bootstrap
}

main
